%!PS-Adobe-3.0 EPSF-3.0
%%Title: rotaryencoder.eps
%%Creator: XCircuit v0.0 rev1832591181
%%CreationDate: Tue Apr 20 15:43:59 2021
%%Pages: 1
%%BoundingBox: 68 68 247 270
%%DocumentNeededResources: font Helvetica HelveticaISO 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.9
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--4/12/16  (tim@opencircuitdesign.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-2012)
%  Open Circuit Design (2012-2016)
%
%%BeginResource: procset XCIRCproc 3.9 1
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } if } def
/ol { count 0 gt { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/MR { /twidth exch def } def
/CRx { } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto CRx } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg
	/rotval exch def /twidth 100000 def /just exch def just 128 and
	0 gt {/mshow {pop} def} {/mshow {show} def} ifelse just 16 and 0
	gt {gsave rotval rotate 0 1 dtransform gsave pagemat setmatrix
	idtransform exch grestore 1 0 dtransform gsave pagemat setmatrix
	idtransform exch grestore dup abs 1e-9 lt {pop mul 0 gt} {3 1 roll
	pop pop 0 lt} ifelse grestore {-1 /rotval rotval neg def /just just
	dup 3 and 1 ne {3 xor} if def} {1} ifelse exch -1e-9 lt {-1 /rotval
	rotval neg def /just just dup 12 and 4 ne {12 xor} if def} {1}
	ifelse scale } if /showflag 0 def /fspc pspc def /Bline 0 def
	/numlines 0 def /padding 0 array def /Tabs 0 array def
	/fscale 1.0 def /kY 0 def gsave /CRx { linewid padding
	aload pop numlines 1 add dup /numlines exch def array astore
	/padding exch def /linewid 0 def } def dup 1 add copy dup 1 0
	dtransform exch atan rotate {exch dup type /stringtype eq {gsave dup
	gsave newpath 0 0 moveto true charpath flattenpath pathbbox pop exch
	pop exch pop grestore currentpoint pop add dup /linewid exch def twidth
	ge {grestore CR exch 1 add dup 2 add {CR} exch 1 roll exch} {grestore}
	ifelse true charpath flattenpath} {dup type /arraytype eq {exec} {12
	string cvs true charpath flattenpath} ifelse} ifelse} repeat
	CRx /CRx {padding aload pop just 1280 and 0 gt {blockwid exch sub just
	1024 and 0 gt {0.5 mul} if} {pop 0} ifelse 0 rmoveto numlines 1 sub
	dup /numlines exch def array astore /padding exch def} def exch pop
	pathbbox grestore 4 copy pop exch pop exch sub /blockwid exch def
	3 -1 roll pop 3 1 roll just 1 and 0 gt {just 2 and
	0 gt {exch pop neg fspc sub} {exch sub 0.5 mul neg} ifelse} {pop neg
	fspc add} ifelse exch Bline exch just 4 and 0 gt {just 8 and 0 gt
	{exch pop neg fspc sub} {add 0.5 mul neg} ifelse} {pop neg fspc add}
	ifelse rotval rotate Kn currentpoint translate /showflag 1 def /Bline
	0 def /Tabs 0 array def /fscale 1.0 def /kY 0 def CRx {dup type
	/stringtype eq {mshow} {dup type /arraytype eq {exec} {12 string cvs
	mshow} ifelse} ifelse} repeat grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce dup type /nametype eq { pop } if translate 0 0 moveto
	neg rotate dup type /nametype eq not { dup abs currentlinewidth exch
	div setlinewidth } { pop } ifelse dup abs scale clipped 1 and 1 eq
	{/clipped clipped 1 add def} if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap 0 setlinejoin} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 2 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog
/Helvetica findfont dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall
/Encoding ISOLatin1Encoding def currentdict end
/HelveticaISO exch definefont pop

% XCircuit output starts here.

%%BeginSetup

/arduino::rotaryenc {
begingate
0.898 0.898 0.898 scb
496 1.000 -48 -64 -48 64 48 64 48 -64 4 polygon
0.000 0.000 1.000 scb
0 1.000 -48 -64 -48 64 48 64 48 -64 4 polygon
0.800 0.800 0.800 scb
497 1.000 0 0 31 0.000 360.000 xcarc
0.600 0.600 0.600 scb
497 1.000 0 0 22 0.000 360.000 xcarc
0.400 0.400 0.400 scb
497 1.000 0 0 20 0.000 360.000 xcarc
0.898 0.898 0.898 scb
496 1.000 -20 -64 -20 -76 -12 -76 -12 -64 4 polygon
496 1.000 12 -64 12 -76 20 -76 20 -64 4 polygon
496 1.000 -4 64 -4 76 4 76 4 64 4 polygon
496 1.000 -24 64 -24 76 -16 76 -16 64 4 polygon
496 1.000 16 64 16 76 24 76 24 64 4 polygon
{/Helvetica 0.500 cf} (button) {0.400 0.400 0.400 scb} {/Helvetica cf} 4 1041 
0.000 0.500 0 -56 label
{/Helvetica 0.500 cf} (A) {0.400 0.400 0.400 scb} {/Helvetica cf} 4 1047 
270.000 0.300 -20 60 label
{/Helvetica 0.500 cf} (Com) {0.400 0.400 0.400 scb} {/Helvetica cf} 4 1047 
270.000 0.300 0 60 label
{/Helvetica 0.500 cf} (B) {0.400 0.400 0.400 scb} {/Helvetica cf} 4 1047 
270.000 0.300 20 60 label
endgate
} def


%%EndSetup

%%Page: afgv/book/rotaryencoder 1
%%PageOrientation: Portrait
/pgsave save def bop
% 32.00 2.00 gridspace
1.0000 inchscale
2.6000 setlinewidth 509 384 translate

1.000 0.000 -6 250 arduino::rotaryenc
0.000 0.934 0.000 scb
1 0.200 -128 -64 -120 -64 -102 -64 -96 -64 -96 -48 -88 -48 -88 -48 -64 -48 -64 
-64 9 polygon
0.800 0.800 0.800 scb
1 1.000 -128 -32 128 -32 2 polygon
497 1.000 128 -32 116 -28 116 -36 128 -32 4 polygon
1 1.000 -126 -112 2 -112 2 -128 -126 -128 4 polygon
497 1.000 -86 -112 -98 -108 -98 -116 -86 -112 4 polygon
497 1.000 -22 -112 -34 -108 -34 -116 -22 -112 4 polygon
497 1.000 -34 -128 -22 -132 -22 -124 -34 -128 4 polygon
497 1.000 -102 -128 -90 -132 -90 -124 -102 -128 4 polygon
0.400 0.400 0.400 scb
(viser retning) {CR} (roteres begge veier. Pilen ) {CR} 
(Den kan dreies eller egentil ) {CR} (og trekker pinner til 0V. ) {CR} 
(Slider som er tilkoblet GND ) {/Helvetica cf} 10 16 0.000 0.500 -126 78 label
(\345 slider) {/HelveticaISO cf} (Retning p) {/Helvetica cf} 4 23 0.000 0.500 
-144 -32 label
(Tidsakse for pulser) {/Helvetica cf} 2 23 0.000 0.500 -144 -72 label
(\345 slider) {/HelveticaISO cf} (Retning p) {/Helvetica cf} 4 23 0.000 0.500 
-144 -118 label
(Tidsakse for pulser) {/Helvetica cf} 2 23 0.000 0.500 -144 -164 label
0.000 0.934 0.000 scb
496 0.200 -128 20 -128 40 -112 40 -112 20 4 polygon
1.000 0.000 0.000 scb
496 0.200 -112 0 -112 20 -96 20 -96 0 4 polygon
0.000 0.934 0.000 scb
496 0.200 -112 20 -112 40 -96 40 -96 20 4 polygon
1.000 0.000 0.000 scb
496 0.200 -96 0 -96 20 -80 20 -80 0 4 polygon
(B) {/Helvetica cf} 2 16 0.000 0.500 -160 -4 label
0.000 0.934 0.000 scb
(A) {/Helvetica cf} 2 16 0.000 0.500 -160 20 label
0.800 0.800 0.800 scb
1 1.000 -128 64 128 64 2 polygon
1 1.000 -120 64 -120 8 2 polygon
497 1.000 -120 30 2 0.000 360.000 xcarc
497 1.000 -120 8 2 0.000 360.000 xcarc
497 1.000 140 64 128 68 128 60 140 64 4 polygon
497 1.000 -140 64 -128 60 -128 68 -140 64 4 polygon
(COM) {/Helvetica cf} 2 16 0.000 0.500 -194 56 label
0.000 0.934 0.000 scb
496 0.200 -48 20 -48 40 -32 40 -32 20 4 polygon
496 0.200 -64 20 -64 40 -48 40 -48 20 4 polygon
1.000 0.000 0.000 scb
496 0.200 -32 0 -32 20 -16 20 -16 0 4 polygon
496 0.200 -48 0 -48 20 -32 20 -32 0 4 polygon
0.000 0.934 0.000 scb
496 0.200 16 20 16 40 32 40 32 20 4 polygon
496 0.200 0 20 0 40 16 40 16 20 4 polygon
1.000 0.000 0.000 scb
496 0.200 32 0 32 20 48 20 48 0 4 polygon
496 0.200 16 0 16 20 32 20 32 0 4 polygon
0.000 0.934 0.000 scb
496 0.200 80 20 80 40 96 40 96 20 4 polygon
496 0.200 64 20 64 40 80 40 80 20 4 polygon
1.000 0.000 0.000 scb
496 0.200 96 0 96 20 112 20 112 0 4 polygon
496 0.200 80 0 80 20 96 20 96 0 4 polygon
1 0.200 -128 -96 -112 -96 -112 -80 -80 -80 -80 -96 -80 -96 -72 -96 -64 -96 -64 
-96 9 polygon
0.000 0.934 0.000 scb
1 0.200 -64 -64 -56 -64 -38 -64 -32 -64 -32 -48 -24 -48 -24 -48 0 -48 0 -64 9 
polygon
1.000 0.000 0.000 scb
1 0.200 -64 -96 -48 -96 -48 -80 -16 -80 -16 -96 -16 -96 -8 -96 0 -96 0 -96 9 
polygon
0.000 0.934 0.000 scb
1 0.200 0 -64 8 -64 26 -64 32 -64 32 -48 40 -48 40 -48 64 -48 64 -64 9 polygon
1.000 0.000 0.000 scb
1 0.200 0 -96 16 -96 16 -80 48 -80 48 -96 48 -96 56 -96 64 -96 64 -96 9 polygon
0.000 0.934 0.000 scb
1 0.200 64 -64 72 -64 90 -64 96 -64 96 -48 104 -48 104 -48 128 -48 128 -64 9 
polygon
1.000 0.000 0.000 scb
1 0.200 64 -96 80 -96 80 -80 112 -80 112 -96 112 -96 120 -96 128 -96 128 -96 9 
polygon
0.000 0.934 0.000 scb
1 0.200 -128 -160 -120 -160 -102 -160 -96 -160 -96 -144 -88 -144 -88 -144 -64 
-144 -64 -160 9 polygon
1.000 0.000 0.000 scb
1 0.200 -128 -192 -112 -192 -112 -176 -80 -176 -80 -192 -80 -192 -72 -192 -64 
-192 -64 -192 9 polygon
0.000 0.934 0.000 scb
1 0.200 -64 -160 -56 -160 -38 -160 -32 -160 -32 -144 -24 -144 -24 -144 0 -144 0 
-144 9 polygon
1.000 0.000 0.000 scb
1 0.200 -64 -192 -48 -192 -48 -176 -16 -176 -16 -192 -16 -192 -8 -192 0 -192 0 
-192 9 polygon
1 0.200 0 -192 16 -192 16 -176 48 -176 48 -192 48 -192 56 -192 64 -192 64 -192 
9 polygon
0.000 0.934 0.000 scb
1 0.200 64 -160 56 -160 38 -160 32 -160 32 -144 24 -144 24 -144 0 -144 0 -144 9 
polygon
1.000 0.000 0.000 scb
1 0.200 64 -192 80 -192 80 -176 112 -176 112 -192 112 -192 120 -192 128 -192 
128 -192 9 polygon
0.000 0.934 0.000 scb
1 0.200 128 -160 112 -160 102 -160 96 -160 96 -144 88 -144 64 -144 64 -160 64 
-160 9 polygon
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
