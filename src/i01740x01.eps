%!PS-Adobe-3.0 EPSF-3.0
%%Title: i01740x01.eps
%%Creator: XCircuit v3.7 rev26
%%CreationDate: Sun Oct 28 11:08:28 2012
%%Pages: 1
%%BoundingBox: 68 68 442 360
%%DocumentNeededResources: font Helvetica Times-Italic 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 3.7
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--11/1/10  (tim.edwards@multigig.com)
%  The Johns Hopkins University (1993-2004)
%  MultiGiG, Inc. (2004-present)
%
%%BeginResource: procset XCIRCproc 3.7 2
%
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg /rotval exch def
	/just exch def just 384 and 0 gt {/mshow {pop} def} {/mshow {show}
	def} ifelse just 16 and 0 gt {gsave rotval rotate 0 1 dtransform
	gsave pagemat setmatrix idtransform exch grestore 1 0 dtransform
	gsave pagemat setmatrix idtransform exch grestore dup abs 1e-9 lt
	{pop mul 0 gt} {3 1 roll pop pop 0 lt} ifelse grestore {-1 /rotval
	rotval neg def /just just dup 3 and 1 ne {3 xor} if def} {1} ifelse
	exch -1e-9 lt {-1 /rotval rotval neg def /just just dup 12 and
	4 ne {12 xor} if def} {1} ifelse scale } if /showflag 0 def
	/fspc pspc def /Bline 0 def /Tabs 0 array def /fscale 1.0 def
	/kY 0 def gsave dup 1 add copy 0 exch 1 0 dtransform exch atan rotate
	{exch dup type /stringtype eq {true charpath flattenpath} {dup type
	/arraytype eq {exec} {12 string cvs true charpath flattenpath} ifelse}
	ifelse} repeat pop pathbbox grestore 3 -1 roll pop 3 1 roll just
	1 and 0 gt {just 2 and 0 gt {exch pop neg fspc sub} {exch sub 0.5
	mul neg} ifelse} {pop neg fspc add} ifelse exch Bline exch just 4
	and 0 gt {just 8 and 0 gt {exch pop neg fspc sub} {add 0.5 mul neg}
	ifelse} {pop neg fspc add} ifelse rotval rotate Kn currentpoint
	translate /showflag 1 def /Bline 0 def /Tabs 0 array def /fscale
	1.0 def /kY 0 def {dup type /stringtype eq {mshow} {dup type
	/arraytype eq {exec} {12 string cvs mshow} ifelse} ifelse} repeat
	grestore endclip} def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def
/graphic { gsave 4 index cvx exec /DataSource get resetfile translate 0 0
	moveto neg rotate dup scale cvx exec image grestore endclip} def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate {dup type /dicttype ne {1 dict} if begin	% default params
	dup type /dicttype ne {1 dict} if begin		% instanced params
	/hlevel hlevel 1 add def /defColor currentcolor sce 3 array astore
	def gsave sce translate 0 0 moveto neg rotate dup type /nametype
	eq not { dup abs currentlinewidth exch div setlinewidth } { pop }
	ifelse dup abs scale clipped 1 and 1 eq {/clipped clipped 1 add def}
	if} bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb end end endclip} bind def

/hlevel 0 def
/endclip {clipped 1 and 1 eq {grestore /clipped clipped 1 sub def} if} def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def style 2048 and 0 gt
  clipped 1 and 0 eq and {clip newpath /clipped clipped 1 add def} {
  style 1 and 0 gt not {closepath} if
  style 1024 and 0 gt {2 setlinecap} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if
  gsave style 16 and 0 gt { style 224 and -5 bitshift style 256 and 0 gt {
  7 exch sub 8 div dup 1 exch sub currentrgbcolor 3 array astore
  {3 copy mul add 4 1 roll pop} forall pop pop setrgbcolor eofill}
  {dup 7 lt {gar exch get ppaint} {pop eofill} ifelse} ifelse}
  {style 256 and 0 gt {1 setgray eofill} if} ifelse grestore style 8 and 0 gt 
  style 512 eq or {newpath} {stroke} ifelse grestore endclip} ifelse} def     

/addtoy {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll add
	4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtoy1 {1 exch addtoy pop} def
/addtoy3 {3 exch addtoy pop} def
/addtoy4 {4 exch addtoy pop} def
/addtox {exch dup dup 2 mul 3 add 1 roll -1 1 { 4 1 roll dup 4 1 roll 3 -1 roll
	add exch 4 -1 roll 2 mul 1 add index 2 mul 2 add 2 roll} for pop} def
/addtox1 {1 exch addtox pop} def
/addtox3 {3 exch addtox pop} def
/addtox4 {4 exch addtox pop} def
/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 0 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef
	/clipped 0 def} def
/psinsertion {/PSobj save def /showpage {} def /setpagedevice {pop} def bop
	rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

%%BeginSetup

/::valve_globe_air {
begingate
1 1.000 -48 32 48 32 2 polygon
1 1.000 -48 -80 -48 -16 48 -80 48 -16 -48 -80 5 polygon
1 1.000 0 -48 0 32 2 polygon
1 1.000 -48 96 48 96 48 32 -48 32 spline
endgate
} def

/::field {
begingate
1 1.000 0 0 64 0.000 360.000 xcarc
endgate
} def

/::aux_behind {
begingate
3 1.000 -64 -8 64 -8 2 polygon
1 1.000 0 0 64 0.000 360.000 xcarc
3 1.000 -64 8 64 8 2 polygon
endgate
} def


%%EndSetup

%%Page: i01740x01 1
%%PageOrientation: Portrait
/pgsave save def bop
0.7500 inchscale
2.6000 setlinewidth 920 896 translate

-1.000 /sv 180 -256 -48 ::valve_globe_air
0 1.000 -64 208 -64 -256 288 -256 288 208 4 polygon
1 1.000 -64 -352 288 -352 288 -256 -64 -256 spline
1 1.000 -64 304 288 304 288 208 -64 208 spline
1.000 0 400 160 ::field
(TT) {/Helvetica cf} 2 16 0 1.000 376 176 label
1.000 0 400 0 ::field
1 1.000 336 0 288 0 2 polygon
(TT) {/Helvetica cf} 2 16 0 1.000 376 16 label
1.000 0 400 -160 ::field
(TT) {/Helvetica cf} 2 16 0 1.000 376 -144 label
(24a) {/Helvetica cf} 2 16 0 1.000 368 128 label
(24b) {/Helvetica cf} 2 16 0 1.000 368 -32 label
(24c) {/Helvetica cf} 2 16 0 1.000 368 -192 label
0 1.000 336 -416 336 -544 464 -544 464 -416 4 polygon
1.000 0 400 -480 ::aux_behind
3 1.000 400 -224 400 -416 2 polygon
1 1.000 384 -400 400 -416 416 -400 3 polygon
1 1.000 480 -464 464 -480 480 -496 3 polygon
1 1.000 384 -560 400 -544 416 -560 3 polygon
3 1.000 464 -480 560 -480 560 0 464 0 4 polygon
3 1.000 464 160 640 160 640 -624 400 -624 400 -544 5 polygon
1.000 0 112 -480 ::aux_behind
0 1.000 48 -416 48 -544 176 -544 176 -416 4 polygon
(TY) {/Helvetica cf} 2 16 0 1.000 376 -464 label
(24) {/Helvetica cf} 2 16 0 1.000 376 -528 label
3 1.000 336 -480 176 -480 2 polygon
1 1.000 192 -464 176 -480 192 -496 3 polygon
(TIC) {/Helvetica cf} 2 16 0 1.000 80 -464 label
(24) {/Helvetica cf} 2 16 0 1.000 88 -528 label
1 2.000 -208 0 -64 0 2 polygon
1 1.000 -80 16 -64 0 -80 -16 3 polygon
1 2.000 -304 0 -480 0 2 polygon
1 1.000 -464 16 -496 -16 -480 -16 -480 16 spline
(Reactor) {/Helvetica cf} 2 16 0 1.000 48 -16 label
(Quench) {/Helvetica cf} 2 16 0 1.000 -656 8 label
(hydrogen) {/Helvetica cf} 2 16 0 1.000 -664 -32 label
1 1.000 -320 16 -304 0 -320 -16 3 polygon
1 2.000 -224 352 112 352 112 280 3 polygon
1 1.000 96 296 112 280 128 296 3 polygon
1 1.000 -208 368 -240 336 -224 336 -224 368 spline
1 1.000 -96 -352 -112 -368 -96 -384 3 polygon
1 2.000 -112 -368 112 -368 112 -328 3 polygon
(Product out) {/Helvetica cf} 2 16 0 1.000 -328 -384 label
3 1.000 48 -480 -384 -480 -384 -192 -256 -192 -256 -128 5 polygon
1 1.000 -272 -144 -256 -128 -240 -144 3 polygon
1.000 0.000 0.000 scb
(F) {ns} (o) {Ss} (735 ) {/Times-Italic cf} 6 16 0 0.750 480 16 label
(F) {ns} (o) {Ss} (731 ) {/Times-Italic cf} 6 16 0 0.750 480 176 label
sce
(Median) {/Helvetica cf} 2 16 0 0.500 472 -440 label
(TV-24) {/Helvetica cf} 2 16 0 1.000 -320 48 label
1 1.000 96 -560 112 -544 128 -560 3 polygon
1 1.000 112 -544 112 -608 2 polygon
(F) {ns} (o) {Ss} (SP = 730 ) {/Helvetica cf} 6 16 0 0.750 48 -640 label
(Feed in) {/Helvetica cf} 2 16 0 1.000 -384 344 label
1 1.000 288 16 304 16 320 160 336 160 4 polygon
1 1.000 288 -16 304 -16 320 -160 336 -160 4 polygon
1.000 0.000 0.000 scb
(F) {ns} (o) {Ss} (720 ) {/Times-Italic cf} 6 16 0 0.750 416 -256 label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
