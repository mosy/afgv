%!PS-Adobe-3.0 EPSF-3.0
%%Title: i01799x01.eps
%%Creator: Xcircuit v3.0
%%CreationDate: Sun Feb 25 16:44:18 2007
%%Pages: 1
%%BoundingBox: 68 68 409 284
%%DocumentNeededResources: font Helvetica font Helvetica-Oblique 
%%+ font Times-Roman 
%%EndComments
%%BeginProlog
%
%  PostScript prolog for output from xcircuit
%  Version: 2.4
%
%  Electrical circuit (and otherwise general) drawing program
%
%  Written by Tim Edwards 8/5/93--5/16/01  (tim@bach.ece.jhu.edu)
%  The Johns Hopkins University
%
%%BeginResource: procset XCIRCproc 2.4 1
% supporting definitions --- these are the primary xcircuit types.

/XCIRCsave save def
/topmat matrix currentmatrix def

/fontslant { /slant exch def [1 0 slant 1 0 0] 
    exch findfont exch makefont dup length dict /ndict exch def
    { 1 index /FID ne { ndict 3 1 roll put } { pop pop } ifelse } forall
    ndict definefont pop} def
/ul { dup type /stringtype eq showflag 1 eq and { gsave 
   currentpoint topmat setmatrix 0 0 moveto 2 index stringwidth pop (_)
   false charpath flattenpath pathbbox grestore exch pop 1 index
   sub setlinewidth exch pop currentpoint 3 -1 roll add moveto 0
   rlineto stroke moveto } if } def
/ol { dup type /stringtype eq showflag 1 eq and { gsave gsave
   currentpoint topmat setmatrix 2 index stringwidth pop 3 index
   true charpath flattenpath pathbbox grestore exch pop
   exch pop topmat setmatrix (_) true charpath pathbbox grestore
   exch pop 1 index sub setlinewidth exch pop currentpoint
   exch 4 1 roll exch sub add moveto pop 0 rlineto stroke
   moveto } if } def
/stW { gsave currentpoint newpath moveto true charpath flattenpath
	pathbbox pop exch pop sub grestore } def
/Ts {mark Tabs aload pop counttomark 1 add array astore /Tabs exch def Tabs
	0 currentpoint pop put} def
/Tbn {mark Tabs aload pop counttomark dup 2 add 1 roll cleartomark 1 sub} def
/Tb { 0 1 Tbn {Tabs exch get dup currentpoint pop lt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/Tf { Tbn -1 0 {Tabs exch get dup currentpoint pop gt
	{currentpoint exch pop moveto exit} {pop} ifelse } for } def
/qS { (aa) stW (a a) stW sub 4 div 0 Kn } def
/hS { qS qS } def
/pspc 0 def
/cf0 { scalefont setfont } bind def
/Kn { dup kY add /kY exch def rmoveto } bind def
/ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.33 mul neg Kn} def
/Ss { /fscale fscale 0.67 mul def currentfont 0.67 cf0 0 fscale0 fscale mul
	0.67 mul Kn } def
/ns { 0 kY neg Kn /kY 0 def /fscale 1.0 def xfont0 1.0 cf0 } def
/CR { ns 0 /Bline Bline fscale0 neg add def Bline moveto } def
/cf { dup type /realtype ne {1.0} if exch findfont exch kY 0 eq
	{ 40 mul dup /fscale0 exch def cf0 /xfont0 currentfont def}
	{fscale0 mul fscale mul cf0} ifelse } def
/ctmk { counttomark dup 2 add -1 roll pop } bind def
/label { gsave translate 0 0 moveto dup scale neg /rotval exch def
	/just exch def just 16 and 0 gt {gsave rotval rotate 0 1 dtransform
	gsave pagemat setmatrix idtransform exch grestore 1 0 dtransform
	gsave pagemat setmatrix idtransform exch grestore dup abs 1e-9 lt
	{pop mul 0 gt} {3 1 roll pop pop 0 lt} ifelse grestore {-1 /rotval
	rotval neg def /just just dup 3 and 1 ne {3 xor} if def} {1} ifelse
	exch -1e-9 lt {-1 /rotval rotval neg def /just just dup 12 and
	4 ne {12 xor} if def} {1} ifelse scale } if /showflag 0 def
	/fspc pspc def /Bline 0 def /Tabs 0 array def /fscale 1.0 def
	/kY 0 def gsave dup 1 add copy 0 exch 1 0 dtransform exch atan rotate
	{exch dup type /stringtype eq {true charpath flattenpath} {exec}
	ifelse } repeat pop pathbbox grestore 3 -1 roll pop 3 1 roll just
	1 and 0 gt {just 2 and 0 gt {exch pop neg fspc sub} {exch sub 0.5
	mul neg} ifelse} {pop neg fspc add} ifelse exch Bline exch just 4
	and 0 gt {just 8 and 0 gt {exch pop neg fspc sub} {add 0.5 mul neg}
	ifelse} {pop neg fspc add} ifelse rotval rotate Kn currentpoint
	translate /showflag 1 def /Bline 0 def /Tabs 0 array def /fscale
	1.0 def /kY 0 def {dup type /stringtype eq {show}{exec} ifelse}
	repeat grestore } def
/pinlabel { 4 index 32 and 0 ne hlevel 0 eq or { /pspc 10 def label
	/pspc 0 def } { pop pop pop pop pop {pop} repeat } ifelse } def
/pinglobal { pinlabel } def
/infolabel { pinlabel } def

/scb { setrgbcolor } bind def  /sce { defColor aload pop scb } bind def
/cRedef {/defColor currentcolor 3 array astore def} def
/begingate { /hlevel hlevel 1 add def /defColor currentcolor sce 3 array
	astore def gsave sce translate 0 0 moveto neg rotate dup abs scale
	} bind def
/makeparm  {3 string cvs dup length 1 add string /tstr exch def tstr exch
	1 exch putinterval tstr 0 (v) putinterval tstr cvn} bind def
/beginparm { -1 1 {makeparm exch def} for
	dup type /arraytype eq { aload length -1 1 {makeparm exch def}
	for } if begingate } bind def
/endgate { /hlevel hlevel 1 sub def grestore defColor aload pop cRedef
	scb} bind def

/hlevel 0 def
/tmpa [1 0 0 1 0 0] def
/gar {8 8 true tmpa {<c0 c0 00 00 0c 0c 00 00>} imagemask} bind
{8 8 true tmpa {<30 70 60 02 03 07 06 20>} imagemask} bind
{8 8 true tmpa {<0c 1e 1e 0c c0 e1 e1 c0>} imagemask} bind
{8 8 true tmpa {<0f 0f 0f 0f f0 f0 f0 f0>} imagemask} bind
{8 8 true tmpa {<3f f3 e1 e1 f3 3f 1e 1e>} imagemask} bind
{8 8 true tmpa {<df cf 8f 9f fd fc f8 f9>} imagemask} bind
{8 8 true tmpa {<ff 3f 3f ff ff f3 f3 ff>} imagemask} bind 7 array astore def
/ppaint { gsave clip tmpa dup setmatrix pathbbox neg exch neg 4 2 roll
  neg 4 -1 roll 2 copy gt {exch} if 8 div ceiling 8 mul 4 2 roll neg 2 copy
  gt {exch} if 8 div ceiling 8 mul 3 -1 roll -8 5 -1 roll
  { 3 index exch 5 exch put dup -8 3 index { 3 index
  exch 4 exch put 3 index exec } for } for pop pop pop pop grestore } bind def
/setstyles {
  currentlinewidth mul setlinewidth /style exch def
  style 1 and 0 gt not {closepath} if
  style 2 and 0 gt {currentlinewidth 4 mul dup 2 array astore 0 setdash} if 
  style 4 and 0 gt {0.5 currentlinewidth 4 mul 2 array astore 0 setdash} if 
  style dup 256 ge exch 480 lt and { gsave 1 setgray eofill grestore } if
  style 16 and 0 gt { gsave style 224 and -5 bitshift dup 7 lt
	{gar exch get ppaint} { pop eofill } ifelse grestore } if
  style 8 and 0 gt style 512 eq or { newpath } { stroke } ifelse grestore } def

/polygon { gsave /num exch def moveto num 1 sub {lineto} repeat setstyles } def
/xcarc   { gsave newpath arc setstyles } def
/elb { matrix currentmatrix 7 -1 roll 7 -1 roll translate 5 1 roll 4 -1 roll
	3 index div 1 scale } def
/ele { 0 4 1 roll 0 4 1 roll } bind def
/ellipse { gsave elb newpath ele arc setmatrix setstyles } def
/pellip  { elb ele arc setmatrix } def
/nellip  { elb ele arcn setmatrix } def
/spline  { gsave moveto curveto setstyles } def
/polyc   { {lineto} repeat } bind def
/beginpath { gsave moveto } bind def
/endpath { setstyles } bind def
/bop	 { 1 setlinecap 0 setlinejoin 6 setmiterlimit 0 0 0 scb cRedef } def
/psinsertion {/PSobj save def /showpage {} def bop rotate translate dup scale} def
/end_insert {PSobj restore} def
/setpagemat {/pagemat matrix currentmatrix def} def
/inchscale  {setpagemat 0.375 mul dup scale} def
/cmscale    {setpagemat 0.35433071 mul dup scale} def

%%EndResource
%%EndProlog

% XCircuit output starts here.

/arrowhead {
% trivial
begingate
8 -28 beginpath
3 -18 3 -15 0 0 curveto
-3 -15 -3 -18 -8 -28 curveto
-2 -26 2 -26 8 -28 curveto
249 1.00 endpath
endgate
} def

/arrow {
% trivial
begingate
1 0.80 0 -40 0 20 2 polygon
1.00 0 0 40 arrowhead
endgate
} def

%%Page: 8400x020.eps 1
%%PageOrientation: Portrait
/pgsave save def bop
% 864 607 offsets
0.7500 inchscale
2.6000 setlinewidth

0.800 0.800 0.800 scb
1 1.00 384 991 384 351 2 polygon
1 1.00 416 991 416 351 2 polygon
1 1.00 448 991 448 351 2 polygon
1 1.00 480 991 480 351 2 polygon
1 1.00 512 991 512 351 2 polygon
1 1.00 544 991 544 351 2 polygon
1 1.00 576 991 576 351 2 polygon
1 1.00 608 991 608 351 2 polygon
1 1.00 640 991 640 351 2 polygon
1 1.00 672 991 672 351 2 polygon
1 1.00 704 991 704 351 2 polygon
1 1.00 736 991 736 351 2 polygon
1 1.00 768 991 768 351 2 polygon
1 1.00 800 991 800 351 2 polygon
1 1.00 832 991 832 351 2 polygon
1 1.00 864 991 864 351 2 polygon
1 1.00 896 991 896 351 2 polygon
1 1.00 928 991 928 351 2 polygon
1 1.00 960 991 960 351 2 polygon
1 1.00 992 991 992 351 2 polygon
1 1.00 1024 991 1024 351 2 polygon
1 1.00 1056 991 1056 351 2 polygon
1 1.00 1088 991 1088 351 2 polygon
1 1.00 1120 991 1120 351 2 polygon
1 1.00 1152 991 1152 351 2 polygon
1 1.00 1184 991 1184 351 2 polygon
1 1.00 1216 991 1216 351 2 polygon
1 1.00 1248 991 1248 351 2 polygon
1 1.00 1280 991 1280 351 2 polygon
1 1.00 1312 991 1312 351 2 polygon
1 1.00 1344 991 1344 351 2 polygon
1 1.00 1376 991 1376 351 2 polygon
1 1.00 1408 991 1408 351 2 polygon
1 1.00 1440 991 1440 351 2 polygon
1 1.00 352 991 1440 991 2 polygon
1 1.00 352 959 1440 959 2 polygon
1 1.00 352 927 1440 927 2 polygon
1 1.00 352 895 1440 895 2 polygon
1 1.00 352 863 1440 863 2 polygon
1 1.00 352 831 1440 831 2 polygon
1 1.00 352 799 1440 799 2 polygon
1 1.00 352 767 1440 767 2 polygon
1 1.00 352 735 1440 735 2 polygon
1 1.00 352 703 1440 703 2 polygon
1 1.00 352 671 1440 671 2 polygon
1 1.00 352 639 1440 639 2 polygon
1 1.00 352 607 1440 607 2 polygon
1 1.00 352 575 1440 575 2 polygon
1 1.00 352 543 1440 543 2 polygon
1 1.00 352 511 1440 511 2 polygon
1 1.00 352 479 1440 479 2 polygon
1 1.00 352 447 1440 447 2 polygon
1 1.00 352 415 1440 415 2 polygon
1 1.00 352 383 1440 383 2 polygon
sce
1 1.00 352 991 352 351 1440 351 3 polygon
1.00 90 1112 273 arrow
(0) {/Times-Roman cf} 2 16 0 0.50 328 343 label
(5) {/Times-Roman cf} 2 16 0 0.50 328 375 label
(10) {/Times-Roman cf} 2 16 0 0.50 320 407 label
(15) {/Times-Roman cf} 2 16 0 0.50 320 439 label
(20) {/Times-Roman cf} 2 16 0 0.50 320 471 label
(25) {/Times-Roman cf} 2 16 0 0.50 320 503 label
(30) {/Times-Roman cf} 2 16 0 0.50 320 535 label
(35) {/Times-Roman cf} 2 16 0 0.50 320 567 label
(40) {/Times-Roman cf} 2 16 0 0.50 320 599 label
(45) {/Times-Roman cf} 2 16 0 0.50 320 631 label
(50) {/Times-Roman cf} 2 16 0 0.50 320 663 label
(55) {/Times-Roman cf} 2 16 0 0.50 320 695 label
(60) {/Times-Roman cf} 2 16 0 0.50 320 727 label
(65) {/Times-Roman cf} 2 16 0 0.50 320 759 label
(70) {/Times-Roman cf} 2 16 0 0.50 320 791 label
(75) {/Times-Roman cf} 2 16 0 0.50 320 823 label
(80) {/Times-Roman cf} 2 16 0 0.50 320 855 label
(85) {/Times-Roman cf} 2 16 0 0.50 320 887 label
(90) {/Times-Roman cf} 2 16 0 0.50 320 919 label
(95) {/Times-Roman cf} 2 16 0 0.50 320 951 label
(100) {/Times-Roman cf} 2 16 0 0.50 312 983 label
(%) {/Times-Roman cf} 2 16 0 1.00 256 671 label
(0:00) {/Times-Roman cf} 2 16 0 0.50 338 319 label
(Time \(Minutes : Seconds\)) {/Helvetica cf} 2 16 0 1.00 600 261 label
1 1.00 1312 351 1312 343 2 polygon
1 1.00 1120 351 1120 343 2 polygon
1 1.00 928 351 928 343 2 polygon
1 1.00 736 351 736 343 2 polygon
1 1.00 544 351 544 343 2 polygon
1 1.00 352 351 352 343 2 polygon
(0:30) {/Times-Roman cf} 2 16 0 0.50 528 319 label
(1:00) {/Times-Roman cf} 2 16 0 0.50 720 319 label
(1:30) {/Times-Roman cf} 2 16 0 0.50 912 319 label
(2:00) {/Times-Roman cf} 2 16 0 0.50 1104 319 label
(2:30) {/Times-Roman cf} 2 16 0 0.50 1296 319 label
0.000 0.000 1.000 scb
1 1.00 354 775 364 777 368 777 370 777 378 775 380 773 382 773 400 777 420 773 
456 777 482 773 500 777 512 777 514 777 520 777 520 781 524 785 528 789 532 791 
536 793 540 793 542 795 544 797 548 797 548 799 552 799 558 801 566 803 568 803 
572 803 574 803 576 803 582 801 584 801 588 801 598 801 600 801 608 797 610 797 
616 797 620 795 624 793 628 789 636 785 640 781 646 779 652 775 658 771 666 769 
676 765 680 761 690 757 702 749 718 737 724 733 732 729 736 727 748 721 758 717 
764 713 768 711 790 705 798 701 800 701 816 693 822 689 838 679 842 677 844 675 
848 671 856 667 866 667 870 665 874 661 876 661 886 655 894 651 898 649 904 645 
912 639 918 635 922 633 928 629 936 627 942 623 944 623 950 619 954 619 956 617 
958 615 966 613 968 611 970 611 976 607 978 605 994 591 998 587 1000 587 1014 
579 1022 575 1028 573 1034 571 1040 571 1042 569 1054 563 1058 561 1062 559 
1070 555 1074 555 1090 551 1104 547 1110 545 1114 545 1118 545 1126 543 1130 
543 1142 541 1146 541 1150 541 1156 539 1168 541 1172 543 1176 543 1178 543 
1184 543 1186 541 1206 537 1210 539 1216 539 1222 539 1226 539 1230 539 1240 
539 1246 539 1250 539 1254 539 1268 543 1274 545 1278 545 1282 545 1286 543 
1290 541 1294 539 1302 539 1308 539 1316 539 1318 539 1326 539 1330 537 1336 
537 1350 539 1352 541 1358 541 1368 539 1370 539 1376 543 1384 543 1400 537 
1402 539 1406 539 1424 537 1430 539 1432 539 1442 539 164 polygon
(Drum level) {/Helvetica cf} 2 16 0 0.70 512 815 label
0.180 0.545 0.341 scb
(Steam flow) {/Helvetica cf} 2 16 0 0.70 544 687 label
1 1.00 352 653 357 654 359 654 361 653 362 653 369 651 375 653 378 653 379 653 
380 653 381 653 383 653 386 652 388 652 393 651 396 651 398 652 401 652 407 652 
414 650 415 650 416 651 421 651 422 651 423 651 427 651 435 653 436 654 439 654 
446 653 448 652 450 652 451 653 461 652 462 652 465 653 468 653 470 653 472 653 
475 652 478 652 483 651 485 651 488 653 495 653 497 653 500 653 500 652 502 652 
505 652 509 652 510 652 511 653 515 654 516 656 518 661 519 665 523 673 524 680 
524 683 525 687 526 691 528 694 530 699 530 701 530 703 531 705 532 708 532 709 
533 710 536 713 538 714 540 715 541 715 543 716 547 717 552 718 553 717 563 717 
565 717 607 717 609 716 611 716 612 716 614 716 615 715 616 715 619 715 622 716 
623 716 625 716 628 716 630 716 632 716 634 716 637 717 644 717 647 718 650 718 
654 718 655 717 658 716 659 716 666 717 667 717 668 717 676 717 682 719 684 720 
691 719 695 718 698 718 700 718 703 718 713 717 715 716 716 716 719 716 721 716 
724 716 726 717 730 717 733 718 738 719 742 718 745 718 751 717 754 718 757 718 
762 717 763 717 773 716 779 717 782 717 785 718 791 718 795 718 801 717 809 717 
811 717 817 717 830 716 848 716 850 716 853 716 862 715 880 715 886 715 895 715 
900 716 909 716 915 715 920 714 923 716 925 717 932 716 937 716 939 716 949 717 
953 717 956 717 993 718 995 718 999 718 1002 718 1010 718 1013 718 1018 716 
1021 716 1025 716 1028 716 1030 716 1033 716 1035 716 1037 716 1041 717 1044 
717 1047 717 1048 718 1048 719 1051 718 1052 718 1054 718 1055 718 1056 718 
1062 717 1063 716 1065 716 1067 713 1067 712 1069 710 1072 706 1076 702 1078 
697 1079 695 1079 693 1082 688 1083 685 1085 675 1086 673 1090 669 1092 667 
1093 663 1094 661 1094 660 1095 658 1096 657 1103 654 1106 653 1107 653 1116 
652 1118 652 1121 652 1130 651 1131 651 1130 652 1134 652 1141 651 1147 651 
1157 652 1158 652 1164 653 1172 653 1174 653 1188 651 1194 651 1203 651 1209 
651 1212 651 1220 651 1228 651 1238 651 1243 653 1251 655 1259 653 1269 653 
1284 651 1289 652 1297 652 1299 652 1305 652 1310 652 1313 650 1315 650 1320 
651 1324 653 1335 653 1337 653 1339 652 1349 651 1358 652 1359 653 1369 653 
1376 652 1378 651 1388 651 1390 652 1394 652 1397 653 1403 653 1410 653 1414 
653 1415 652 1421 651 1424 651 1430 651 1433 653 1440 652 268 polygon
1.000 0.000 0.000 scb
(\(Feedwater valve in manual\)) {/Helvetica-Oblique cf} 2 16 0 1.00 480 495 
label
pgsave restore showpage

%%Trailer
XCIRCsave restore
%%EOF
